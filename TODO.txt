Pour Alix:

Trouver comment ne pas mettre des mods et des use en chaque fichier
faire des defines GDT pour etre clair


Pour Lorenzo:

//weird numpad input, removes char
Regler Makefile petit a petit
Regler les scancodes sur clavier: par example fleche du haute double scancode!!
mettre infos sur la COM1
regler printk


✓✓✓✓✓✓✓✓✓✓✓✓✓
✓✓✓ KFS-1 ✓✓✓
✓✓✓✓✓✓✓✓✓✓✓✓✓
✓✓✓ Mandatory 120%
✓ Install GRUB on an virtual image
✓ Write an ASM boot code that handles multiboot header, and use GRUB to init and call main function of the kernel itself.
✓ Write basic kernel code of the choosen language.
✓ Compile it with correct flags, and link it to make it bootable.
✓ Once all of those steps above are done, you can write some helpers like kernel types or basic functions (strlen, strcmp, ...)
✓ Your work must not exceed 10 MB.
✓ Code the interface between your kernel and the screen.
✓ Display "42" on the screen.
✓ For the link part, you must create a linker file with the GNU linker (ld) For the link part, you must create a linker file with the GNU linker (ld). Some docs https://www.math.utah.edu/docs/info/ld_3.html#SEC4
✓✓✓ Bonus 120%
✓ Add scroll and cursor support to your I/O interface.
✓ Add colors support to your I/O interface.
✓ Add helpers like printf / printk in order to print information / debug easily.
✓ Handle keyboard entries and print them.
✓ Handle different screens, and keyboard shortcuts to switch easily between then.

✓✓✓✓✓✓✓✓✓✓✓✓✓
✓✓✓ KFS-2 ✓✓✓
✓✓✓✓✓✓✓✓✓✓✓✓✓
✓✓✓ Mandatory 118%
✓ You must create a Global Descriptor Table. Your GDT must contain:
✓ Kernel Code ✓ Kernel Data ✓ Kernel stack ✓ User code ✓ User data ✓ User stack
✓ You must declare your GDT to the BIOS.
✓ The GDT must be set at address 0x00000800.
✓ When this is done, you have to code a tool to print the kernel stack, in a human-friendly way. (Tip: If you haven’t made a printk yet, now is a good time !)
✓✓✓ Bonus 118%
✓ Code a minimalistic shell with a few commands, for debugging purposes. Implement:
✓ print_kernel_stack ✓ reboot ✓ halt ✓ time ✓ date ✓ echo ✓ clear ✓ help
 _____
|KFS-4|
¯¯¯¯¯¯¯
••• Mandatory 50%
✓ Create an Interrupts Descriptor Table, fill it and register it
? A signal-callback system on your Kernel API
X An interface to schedule signals
X An interface to clean registers before a panic / halt
X An interface to save the stack before a panic
✓ When you’re done with all of that, you’ll have to implement a IDT keyboard handling system.

••• Bonus 35% -> azerty presque fait, get_line pratiquement fait
X Syscalls are also handled by the IDT. You can’t implement them now (No processus / Execution), but a good start could be coding the base functions for it, it could save you some work.
X Also, you can add some features to the keyboard handler, for example multi layouts (qwerty, azerty), base functions like get_line (just like read: waits for characters and return them when \n is pressed)

 _____
|KFS-3|
¯¯¯¯¯¯¯
• A complete memory code structure, with pagination handling
• Read and Write rights on memory
• User space memory and Kernel space memory
• Physical and Virtual memory
• Code helpers for physical memory, like kmalloc, kfree, ksize, kbrk
• Code helpers for virtual memory, like vmalloc, vfree, vsize, vbrk
• Kernel Panic handling

You must implement a complete, stable and functionnal memory system in your
kernel.
Let’s follow this task, point by point:
• You must enable memory paging in your Kernel
• You must code a memory structure that handle paging and memory rights (Careful,
you don’t have the tools yet to know who’s accessing the memory, so all of this is
theoric at the moment)
• You must define Kernel and User space
• You must implement a function to create / get memory pages
• You must implement functions to allocate, free and get size of a variable.
• You must implement those functions for virtual and physical memory
• You must handle "kernel panics" (Print, stop the kernel)
• Your work should not exceed 10 MB.
Some notes:
First, about this implementation. If you remember correctly, in the first subject, i was
speaking about language (Other than C) limitation, and memory integration. Now’s the
time to implement it !
Secondly, about the panics. There are some times when the kernel must stop, and some
times when the kernel can continue. So all panics are not fatal, make the difference.

Since this subject is really, really hard, the bonuses are not really important.
Try to focus on the code itself, because the memory is most important part of your kernel,
by far. But if you are looking for some things to do after that, try to implement memory
dumping and debug in the last "mini-shell" subject. Keep in mind that will be not graded.